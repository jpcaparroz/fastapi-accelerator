services:
  api_db:
    image: postgres:latest
    restart: unless-stopped
    container_name: ${POSTGRES_HOST}
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
          test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}'"]
          interval: 10s
          retries: 5
          start_period: 5s
          timeout: 10s

  api_app:
    build:
      context: .
    env_file:
      - .env
    container_name: ${APP_CONTAINER_NAME}
    environment:
      FASTAPI_APP: ${FASTAPI_APP}
      FASTAPI_HOST: ${FASTAPI_HOST}
      FASTAPI_PORT: ${FASTAPI_PORT}
      FASTAPI_LOG_LEVEL: ${FASTAPI_LOG_LEVEL}
      FASTAPI_RELOAD: ${FASTAPI_RELOAD}
      FASTAPI_WORKERS: ${FASTAPI_WORKERS}
      POSTGRES_DRIVERNAME: ${POSTGRES_DRIVERNAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_NAME: ${POSTGRES_NAME}
      SECURITY_JWT_SECRET: ${SECURITY_JWT_SECRET}
      SECURITY_ALGORITHM: ${SECURITY_ALGORITHM}
      SECURITY_TOKEN_EXPIRE_MINUTES: ${SECURITY_TOKEN_EXPIRE_MINUTES}
    ports:
      - "${FASTAPI_PORT}:${FASTAPI_PORT}"
    depends_on:
      api_db:
        condition: service_healthy
        restart: true